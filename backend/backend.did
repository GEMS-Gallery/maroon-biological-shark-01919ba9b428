type SDPData = text;
type Result_2 = 
 variant {
   err: text;
   ok: CallId;
 };
type Result_1 = 
 variant {
   err: text;
   ok: CallSession;
 };
type Result = 
 variant {
   err: text;
   ok;
 };
type ParticipantId = principal;
type ICECandidate = text;
type CallSession = 
 record {
   answers: vec opt SDPData;
   iceCandidates: vec vec ICECandidate;
   offers: vec opt SDPData;
   participants: vec opt ParticipantId;
 };
type CallId = nat;
service : {
  addIceCandidate: (CallId, ICECandidate) -> (Result);
  endCall: (CallId) -> (Result);
  getCallSession: (CallId) -> (Result_1) query;
  initializeCall: () -> (Result_2);
  joinCall: (CallId) -> (Result_1);
  sendAnswer: (CallId, SDPData) -> (Result);
  sendOffer: (CallId, SDPData) -> (Result);
}
